name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # List all tags for debugging
          echo "Available tags:"
          git tag
          
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "No tags found, defaulting to v0.0.0"
            latest_tag="v0.0.0"
          else
            echo "Found latest tag: ${latest_tag}"
          fi
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          latest_version=${latest_tag#v}
          echo "Processing version: $latest_version"
          
          # Split version and ensure all components exist
          IFS='.' read -r major minor patch <<< "$latest_version"
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          echo "Parsed version components:"
          echo "Major: $major"
          echo "Minor: $minor"
          echo "Patch: $patch"
          
          case "${{ github.event.inputs.release_type }}" in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "Calculated new version: $new_version"
          
          # Ensure all parts are present in the version
          if [[ ! $new_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            new_version="0.0.0"
          fi
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "new_tag=v${new_version}" >> $GITHUB_OUTPUT

      - name: Update manifest version
        run: |
          echo "Updating manifest.json version to ${{ steps.version.outputs.new_version }}"
          # Use sed with different syntax for macOS/Linux compatibility
          sed -i.bak "s/\"version\": \"[^\"]*\"/\"version\": \"${{ steps.version.outputs.new_version }}\"/" manifest.json
          rm -f manifest.json.bak
          # Verify the change
          if grep -q "\"version\": \"${{ steps.version.outputs.new_version }}\"" manifest.json; then
            echo "Successfully updated version in manifest.json"
            cat manifest.json
          else
            echo "Failed to update version in manifest.json"
            exit 1
          fi

      - name: Create ZIP file
        run: |
          zip -r imdb-watch-extension.zip * \
          -x "*.git*" \
          -x ".github/*" \
          -x "*.md" \
          -x "LICENSE" \
          -x "devmode.png"

      - name: Commit manifest changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Check if manifest.json has changes
          if git diff --quiet manifest.json; then
            echo "No changes to manifest.json"
          else
            git add manifest.json
            git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"
            git push
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          files: imdb-watch-extension.zip
          name: Release ${{ steps.version.outputs.new_tag }}
          body: |
            IMDB Watch Button Extension ${{ steps.version.outputs.new_tag }}
            
            Adds a "Watch Now" button to IMDB pages for instant streaming of movies and TV shows.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
